/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.api;

import com.gremlin.api.ApiGremlinException;
import com.gremlin.api.model.Task;
import com.gremlin.api.model.TaskInput;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for AttacksApi
 */
@Ignore
public class AttacksApiTest {

    private final AttacksApi api = new AttacksApi();

    
    /**
     * List all active attacks.
     *
     * This endpoint will return all active attacks for the team.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void active1Test() throws ApiGremlinException {
        String source = null;
        Integer pageSize = null;
        Object teamId = null;
        List<Task> response = api.active1(source, pageSize, teamId);

        // TODO: test validations
    }
    
    /**
     * List all attacks.
     *
     * # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void allTest() throws ApiGremlinException {
        String source = null;
        Integer pageSize = null;
        Object teamId = null;
        List<Task> response = api.all(source, pageSize, teamId);

        // TODO: test validations
    }
    
    /**
     * List all completed attacks.
     *
     * This endpoint will return all completed attacks that the team has performed.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void completed1Test() throws ApiGremlinException {
        String source = null;
        Integer pageSize = null;
        Object teamId = null;
        List<Task> response = api.completed1(source, pageSize, teamId);

        // TODO: test validations
    }
    
    /**
     * Create a new attack.
     *
     * For a list of attack parameters, please visit: https://www.gremlin.com/docs/infrastructure-layer/attacks/#parameter-reference. Please note that if the &#x60;labels&#x60; or &#x60;tags&#x60; fields are not provided, no filtering will be employed and an attack will target all active clients within your team. For more infomation on creating a new attack using the API, please visit: https://www.gremlin.com/docs/api-reference/examples/  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiGremlinException {
        Object teamId = null;
        TaskInput body = null;
        String response = api.create(teamId, body);

        // TODO: test validations
    }
    
    /**
     * Get details about an attack.
     *
     * This endpoint will allow you to get info on a specific attack based on its guid.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiGremlinException {
        String guid = null;
        Object teamId = null;
        Task response = api.get(guid, teamId);

        // TODO: test validations
    }
    
    /**
     * Idempotently halt the specified active attack.
     *
     * # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void haltTest() throws ApiGremlinException {
        String guid = null;
        Object teamId = null;
        List<Task> response = api.halt(guid, teamId);

        // TODO: test validations
    }
    
    /**
     * Idempotently halt all active attacks
     *
     * # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     *
     * @throws ApiGremlinException
     *          if the Api call fails
     */
    @Test
    public void halt1Test() throws ApiGremlinException {
        Object teamId = null;
        List<Task> response = api.halt1(teamId);

        // TODO: test validations
    }
    
}
