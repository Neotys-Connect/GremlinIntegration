/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TaskTarget
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class TaskTarget {
  @SerializedName("templateId")
  private String templateId = null;

  /**
   * Gets or Sets strategyType
   */
  @JsonAdapter(StrategyTypeEnum.Adapter.class)
  public enum StrategyTypeEnum {
    EXACT("Exact"),
    
    REGEX("Regex"),
    
    RANDOM("Random");

    private String value;

    StrategyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StrategyTypeEnum fromValue(String text) {
      for (StrategyTypeEnum b : StrategyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StrategyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrategyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StrategyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StrategyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("strategyType")
  private StrategyTypeEnum strategyType = null;

  /**
   * Gets or Sets targetType
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    HOST("Host"),
    
    CONTAINER("Container"),
    
    DOCKER("Docker"),
    
    KUBERNETES("Kubernetes");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String text) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("targetType")
  private TargetTypeEnum targetType = null;

  @SerializedName("strategy")
  private Strategy strategy = null;

  @SerializedName("resolvedHosts")
  private List<String> resolvedHosts = null;

  @SerializedName("resolvedContainers")
  private Map<String, List<String>> resolvedContainers = null;

  public TaskTarget templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @ApiModelProperty(value = "")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public TaskTarget strategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
    return this;
  }

   /**
   * Get strategyType
   * @return strategyType
  **/
  @ApiModelProperty(value = "")
  public StrategyTypeEnum getStrategyType() {
    return strategyType;
  }

  public void setStrategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
  }

  public TaskTarget targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * Get targetType
   * @return targetType
  **/
  @ApiModelProperty(value = "")
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }

  public TaskTarget strategy(Strategy strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @ApiModelProperty(value = "")
  public Strategy getStrategy() {
    return strategy;
  }

  public void setStrategy(Strategy strategy) {
    this.strategy = strategy;
  }

  public TaskTarget resolvedHosts(List<String> resolvedHosts) {
    this.resolvedHosts = resolvedHosts;
    return this;
  }

  public TaskTarget addResolvedHostsItem(String resolvedHostsItem) {
    if (this.resolvedHosts == null) {
      this.resolvedHosts = new ArrayList<String>();
    }
    this.resolvedHosts.add(resolvedHostsItem);
    return this;
  }

   /**
   * Get resolvedHosts
   * @return resolvedHosts
  **/
  @ApiModelProperty(value = "")
  public List<String> getResolvedHosts() {
    return resolvedHosts;
  }

  public void setResolvedHosts(List<String> resolvedHosts) {
    this.resolvedHosts = resolvedHosts;
  }

  public TaskTarget resolvedContainers(Map<String, List<String>> resolvedContainers) {
    this.resolvedContainers = resolvedContainers;
    return this;
  }

  public TaskTarget putResolvedContainersItem(String key, List<String> resolvedContainersItem) {
    if (this.resolvedContainers == null) {
      this.resolvedContainers = new HashMap<String, List<String>>();
    }
    this.resolvedContainers.put(key, resolvedContainersItem);
    return this;
  }

   /**
   * Get resolvedContainers
   * @return resolvedContainers
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<String>> getResolvedContainers() {
    return resolvedContainers;
  }

  public void setResolvedContainers(Map<String, List<String>> resolvedContainers) {
    this.resolvedContainers = resolvedContainers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskTarget taskTarget = (TaskTarget) o;
    return Objects.equals(this.templateId, taskTarget.templateId) &&
        Objects.equals(this.strategyType, taskTarget.strategyType) &&
        Objects.equals(this.targetType, taskTarget.targetType) &&
        Objects.equals(this.strategy, taskTarget.strategy) &&
        Objects.equals(this.resolvedHosts, taskTarget.resolvedHosts) &&
        Objects.equals(this.resolvedContainers, taskTarget.resolvedContainers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, strategyType, targetType, strategy, resolvedHosts, resolvedContainers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskTarget {\n");
    
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    strategyType: ").append(toIndentedString(strategyType)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    resolvedHosts: ").append(toIndentedString(resolvedHosts)).append("\n");
    sb.append("    resolvedContainers: ").append(toIndentedString(resolvedContainers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

