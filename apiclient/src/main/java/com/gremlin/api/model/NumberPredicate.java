/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * NumberPredicate
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class NumberPredicate extends Predicate {
  /**
   * Gets or Sets numberPredicateComparator
   */
  @JsonAdapter(ComparatorEnum.Adapter.class)
  public enum ComparatorEnum {
    EQU("EQU"),
    
    EQUALS("EQUALS"),
    
    NEQ("NEQ"),
    
    NOT_EQUALS("NOT_EQUALS"),
    
    LES("LES"),
    
    LESS_THAN("LESS_THAN"),
    
    LEQ("LEQ"),
    
    LESS_THAN_OR_EQUAL_TO("LESS_THAN_OR_EQUAL_TO"),
    
    GRT("GRT"),
    
    GREATER_THAN("GREATER_THAN"),
    
    GEQ("GEQ"),
    
    GREATER_THAN_OR_EQUAL_TO("GREATER_THAN_OR_EQUAL_TO");

    private String value;

    ComparatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparatorEnum fromValue(String text) {
      for (ComparatorEnum b : ComparatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ComparatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ComparatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("comparator")
  private ComparatorEnum numberPredicateComparator = null;

  @SerializedName("rValue")
  private Double numberPredicateRValue = null;

  public NumberPredicate numberPredicateComparator(ComparatorEnum numberPredicateComparator) {
    this.numberPredicateComparator = numberPredicateComparator;
    return this;
  }

   /**
   * Get numberPredicateComparator
   * @return numberPredicateComparator
  **/
  @ApiModelProperty(value = "")
  public ComparatorEnum getNumberPredicateComparator() {
    return numberPredicateComparator;
  }

  public void getNumberPredicateComparator(ComparatorEnum numberPredicateComparator) {
    this.numberPredicateComparator = numberPredicateComparator;
  }

  public NumberPredicate numberPredicateRValue(Double numberPredicateRValue) {
    this.numberPredicateRValue = numberPredicateRValue;
    return this;
  }

   /**
   * The right hand value of the predicate
   * @return numberPredicateRValue
  **/
  @ApiModelProperty(value = "The right hand value of the predicate")
  public Double getNumberPredicateRValue() {
    return numberPredicateRValue;
  }

  public void getNumberPredicateRValue(Double numberPredicateRValue) {
    this.numberPredicateRValue = numberPredicateRValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberPredicate numberPredicate = (NumberPredicate) o;
    return Objects.equals(this.numberPredicateComparator, numberPredicate.numberPredicateComparator) &&
        Objects.equals(this.numberPredicateRValue, numberPredicate.numberPredicateRValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberPredicateComparator, numberPredicateRValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberPredicate {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    numberPredicateComparator: ").append(toIndentedString(numberPredicateComparator)).append("\n");
    sb.append("    numberPredicateRValue: ").append(toIndentedString(numberPredicateRValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

