/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AttackTarget
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class AttackTarget {
  @SerializedName("templateId")
  private String templateId = null;

  /**
   * Gets or Sets strategyType
   */
  @JsonAdapter(StrategyTypeEnum.Adapter.class)
  public enum StrategyTypeEnum {
    EXACT("Exact"),
    
    REGEX("Regex"),
    
    RANDOM("Random");

    private String value;

    StrategyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StrategyTypeEnum fromValue(String text) {
      for (StrategyTypeEnum b : StrategyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StrategyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrategyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StrategyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StrategyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("strategy_type")
  private StrategyTypeEnum strategyType = null;

  /**
   * Gets or Sets targetType
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    HOST("Host"),
    
    CONTAINER("Container"),
    
    DOCKER("Docker"),
    
    KUBERNETES("Kubernetes");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String text) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("target_type")
  private TargetTypeEnum targetType = null;

  @SerializedName("strategy")
  private Strategy strategy = null;

  @SerializedName("k8sObjects")
  private List<K8sTarget> k8sObjects = null;

  public AttackTarget templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @ApiModelProperty(value = "")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public AttackTarget strategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
    return this;
  }

   /**
   * Get strategyType
   * @return strategyType
  **/
  @ApiModelProperty(value = "")
  public StrategyTypeEnum getStrategyType() {
    return strategyType;
  }

  public void setStrategyType(StrategyTypeEnum strategyType) {
    this.strategyType = strategyType;
  }

  public AttackTarget targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * Get targetType
   * @return targetType
  **/
  @ApiModelProperty(value = "")
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }

  public AttackTarget strategy(Strategy strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @ApiModelProperty(value = "")
  public Strategy getStrategy() {
    return strategy;
  }

  public void setStrategy(Strategy strategy) {
    this.strategy = strategy;
  }

  public AttackTarget k8sObjects(List<K8sTarget> k8sObjects) {
    this.k8sObjects = k8sObjects;
    return this;
  }

  public AttackTarget addK8sObjectsItem(K8sTarget k8sObjectsItem) {
    if (this.k8sObjects == null) {
      this.k8sObjects = new ArrayList<K8sTarget>();
    }
    this.k8sObjects.add(k8sObjectsItem);
    return this;
  }

   /**
   * Get k8sObjects
   * @return k8sObjects
  **/
  @ApiModelProperty(value = "")
  public List<K8sTarget> getK8sObjects() {
    return k8sObjects;
  }

  public void setK8sObjects(List<K8sTarget> k8sObjects) {
    this.k8sObjects = k8sObjects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttackTarget attackTarget = (AttackTarget) o;
    return Objects.equals(this.templateId, attackTarget.templateId) &&
        Objects.equals(this.strategyType, attackTarget.strategyType) &&
        Objects.equals(this.targetType, attackTarget.targetType) &&
        Objects.equals(this.strategy, attackTarget.strategy) &&
        Objects.equals(this.k8sObjects, attackTarget.k8sObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, strategyType, targetType, strategy, k8sObjects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttackTarget {\n");
    
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    strategyType: ").append(toIndentedString(strategyType)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    k8sObjects: ").append(toIndentedString(k8sObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

