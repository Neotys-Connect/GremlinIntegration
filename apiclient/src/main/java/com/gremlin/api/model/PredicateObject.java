/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * PredicateObject
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class PredicateObject {
  @SerializedName("comparator")
  private HasCompareFunctionObject comparator = null;

  /**
   * The type of primitive this predicate operates on
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("String"),
    
    NUMBER("Number"),
    
    BOOLEAN("Boolean");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("jpQuery")
  private String jpQuery = null;

  @SerializedName("rValue")
  private Object rValue = null;

  public PredicateObject comparator(HasCompareFunctionObject comparator) {
    this.comparator = comparator;
    return this;
  }

   /**
   * Get comparator
   * @return comparator
  **/
  @ApiModelProperty(value = "")
  public HasCompareFunctionObject getComparator() {
    return comparator;
  }

  public void setComparator(HasCompareFunctionObject comparator) {
    this.comparator = comparator;
  }

   /**
   * The type of primitive this predicate operates on
   * @return type
  **/
  @ApiModelProperty(value = "The type of primitive this predicate operates on")
  public TypeEnum getType() {
    return type;
  }

   /**
   * The json path query to run to read from the response body
   * @return jpQuery
  **/
  @ApiModelProperty(value = "The json path query to run to read from the response body")
  public String getJpQuery() {
    return jpQuery;
  }

  public PredicateObject rValue(Object rValue) {
    this.rValue = rValue;
    return this;
  }

   /**
   * The right hand value of the predicate
   * @return rValue
  **/
  @ApiModelProperty(value = "The right hand value of the predicate")
  public Object getRValue() {
    return rValue;
  }

  public void setRValue(Object rValue) {
    this.rValue = rValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredicateObject predicateObject = (PredicateObject) o;
    return Objects.equals(this.comparator, predicateObject.comparator) &&
        Objects.equals(this.type, predicateObject.type) &&
        Objects.equals(this.jpQuery, predicateObject.jpQuery) &&
        Objects.equals(this.rValue, predicateObject.rValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparator, type, jpQuery, rValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredicateObject {\n");
    
    sb.append("    comparator: ").append(toIndentedString(comparator)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    jpQuery: ").append(toIndentedString(jpQuery)).append("\n");
    sb.append("    rValue: ").append(toIndentedString(rValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

