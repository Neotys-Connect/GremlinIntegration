/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * AttackMetricsDisplayResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class AttackMetricsDisplayResponse {
  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("DISABLED"),
    
    PENDING("PENDING"),
    
    NO_DATA("NO_DATA"),
    
    PARTIAL("PARTIAL"),
    
    COMPLETE("COMPLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("disabledReason")
  private String disabledReason = null;

  @SerializedName("range")
  private TimeRange range = null;

  @SerializedName("attack_range")
  private TimeRange attackRange = null;

  @SerializedName("metric_data")
  private Map<String, List<MetricPoint>> metricData = null;

  /**
   * Gets or Sets infraCommandType
   */
  @JsonAdapter(InfraCommandTypeEnum.Adapter.class)
  public enum InfraCommandTypeEnum {
    CPU("cpu"),
    
    IO("IO"),
    
    MEMORY("Memory"),
    
    DISK("Disk"),
    
    BLACKHOLE("Blackhole"),
    
    DNS("DNS"),
    
    LATENCY("Latency"),
    
    PACKET_LOSS("Packet_Loss"),
    
    SHUTDOWN("Shutdown"),
    
    TIME_TRAVEL("Time_Travel"),
    
    PROCESS_KILLER("Process_Killer"),
    
    UNKNOWN("Unknown");

    private String value;

    InfraCommandTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InfraCommandTypeEnum fromValue(String text) {
      for (InfraCommandTypeEnum b : InfraCommandTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InfraCommandTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InfraCommandTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InfraCommandTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InfraCommandTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("infra_command_type")
  private InfraCommandTypeEnum infraCommandType = null;

  @SerializedName("chart_title")
  private String chartTitle = null;

  @SerializedName("lines")
  private List<YAxisLine> lines = null;

  public AttackMetricsDisplayResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public AttackMetricsDisplayResponse disabledReason(String disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

   /**
   * Get disabledReason
   * @return disabledReason
  **/
  @ApiModelProperty(value = "")
  public String getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(String disabledReason) {
    this.disabledReason = disabledReason;
  }

  public AttackMetricsDisplayResponse range(TimeRange range) {
    this.range = range;
    return this;
  }

   /**
   * Get range
   * @return range
  **/
  @ApiModelProperty(value = "")
  public TimeRange getRange() {
    return range;
  }

  public void setRange(TimeRange range) {
    this.range = range;
  }

  public AttackMetricsDisplayResponse attackRange(TimeRange attackRange) {
    this.attackRange = attackRange;
    return this;
  }

   /**
   * Get attackRange
   * @return attackRange
  **/
  @ApiModelProperty(value = "")
  public TimeRange getAttackRange() {
    return attackRange;
  }

  public void setAttackRange(TimeRange attackRange) {
    this.attackRange = attackRange;
  }

  public AttackMetricsDisplayResponse metricData(Map<String, List<MetricPoint>> metricData) {
    this.metricData = metricData;
    return this;
  }

  public AttackMetricsDisplayResponse putMetricDataItem(String key, List<MetricPoint> metricDataItem) {
    if (this.metricData == null) {
      this.metricData = new HashMap<String, List<MetricPoint>>();
    }
    this.metricData.put(key, metricDataItem);
    return this;
  }

   /**
   * Get metricData
   * @return metricData
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<MetricPoint>> getMetricData() {
    return metricData;
  }

  public void setMetricData(Map<String, List<MetricPoint>> metricData) {
    this.metricData = metricData;
  }

  public AttackMetricsDisplayResponse infraCommandType(InfraCommandTypeEnum infraCommandType) {
    this.infraCommandType = infraCommandType;
    return this;
  }

   /**
   * Get infraCommandType
   * @return infraCommandType
  **/
  @ApiModelProperty(value = "")
  public InfraCommandTypeEnum getInfraCommandType() {
    return infraCommandType;
  }

  public void setInfraCommandType(InfraCommandTypeEnum infraCommandType) {
    this.infraCommandType = infraCommandType;
  }

  public AttackMetricsDisplayResponse chartTitle(String chartTitle) {
    this.chartTitle = chartTitle;
    return this;
  }

   /**
   * Get chartTitle
   * @return chartTitle
  **/
  @ApiModelProperty(value = "")
  public String getChartTitle() {
    return chartTitle;
  }

  public void setChartTitle(String chartTitle) {
    this.chartTitle = chartTitle;
  }

  public AttackMetricsDisplayResponse lines(List<YAxisLine> lines) {
    this.lines = lines;
    return this;
  }

  public AttackMetricsDisplayResponse addLinesItem(YAxisLine linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<YAxisLine>();
    }
    this.lines.add(linesItem);
    return this;
  }

   /**
   * Get lines
   * @return lines
  **/
  @ApiModelProperty(value = "")
  public List<YAxisLine> getLines() {
    return lines;
  }

  public void setLines(List<YAxisLine> lines) {
    this.lines = lines;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttackMetricsDisplayResponse attackMetricsDisplayResponse = (AttackMetricsDisplayResponse) o;
    return Objects.equals(this.state, attackMetricsDisplayResponse.state) &&
        Objects.equals(this.disabledReason, attackMetricsDisplayResponse.disabledReason) &&
        Objects.equals(this.range, attackMetricsDisplayResponse.range) &&
        Objects.equals(this.attackRange, attackMetricsDisplayResponse.attackRange) &&
        Objects.equals(this.metricData, attackMetricsDisplayResponse.metricData) &&
        Objects.equals(this.infraCommandType, attackMetricsDisplayResponse.infraCommandType) &&
        Objects.equals(this.chartTitle, attackMetricsDisplayResponse.chartTitle) &&
        Objects.equals(this.lines, attackMetricsDisplayResponse.lines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, disabledReason, range, attackRange, metricData, infraCommandType, chartTitle, lines);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttackMetricsDisplayResponse {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    attackRange: ").append(toIndentedString(attackRange)).append("\n");
    sb.append("    metricData: ").append(toIndentedString(metricData)).append("\n");
    sb.append("    infraCommandType: ").append(toIndentedString(infraCommandType)).append("\n");
    sb.append("    chartTitle: ").append(toIndentedString(chartTitle)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

