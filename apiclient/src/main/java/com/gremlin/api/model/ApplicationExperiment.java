/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * ApplicationExperiment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class ApplicationExperiment {
  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("startTime")
  private OffsetDateTime startTime = null;

  @SerializedName("endTime")
  private OffsetDateTime endTime = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("serviceStates")
  private List<ServiceStateStage> serviceStates = null;

  @SerializedName("distributedClients")
  private List<String> distributedClients = null;

  @SerializedName("impactedClients")
  private List<String> impactedClients = null;

  /**
   * Gets or Sets createSource
   */
  @JsonAdapter(CreateSourceEnum.Adapter.class)
  public enum CreateSourceEnum {
    WEBAPP("WebApp"),
    
    API("Api"),
    
    SCHEDULED("Scheduled"),
    
    MANUAL("Manual"),
    
    SPINNAKER("Spinnaker"),
    
    CONCORD("Concord"),
    
    GREMLINFEEDER("GremlinFeeder"),
    
    GREMLINSDKPYTHON("GremlinSdkPython"),
    
    SCENARIO("Scenario"),
    
    CHAO("Chao"),
    
    WEBSITE("Website");

    private String value;

    CreateSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateSourceEnum fromValue(String text) {
      for (CreateSourceEnum b : CreateSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CreateSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreateSourceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("createSource")
  private CreateSourceEnum createSource = null;

  @SerializedName("expectedEnd")
  private OffsetDateTime expectedEnd = null;

  /**
   * Gets or Sets stage
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    PENDING("Pending"),
    
    DISTRIBUTED("Distributed"),
    
    IMPACTED("Impacted"),
    
    HALTREQUESTED("HaltRequested"),
    
    HALTED("Halted"),
    
    APPLICATIONNOTFOUND("ApplicationNotFound"),
    
    TRAFFICNOTFOUND("TrafficNotFound"),
    
    SUCCESSFUL("Successful");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageEnum fromValue(String text) {
      for (StageEnum b : StageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("stage")
  private StageEnum stage = null;

  @SerializedName("experimentInterval")
  private Interval experimentInterval = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("attributes")
  private Map<String, Object> attributes = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("orgId")
  private String orgId = null;

  @SerializedName("tags")
  private Map<String, String> tags = null;

  @SerializedName("sourceInfo")
  private SourceInfo sourceInfo = null;

  /**
   * Gets or Sets createSourceDetail
   */
  @JsonAdapter(CreateSourceDetailEnum.Adapter.class)
  public enum CreateSourceDetailEnum {
    ONBOARDING("Onboarding");

    private String value;

    CreateSourceDetailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateSourceDetailEnum fromValue(String text) {
      for (CreateSourceDetailEnum b : CreateSourceDetailEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CreateSourceDetailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateSourceDetailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateSourceDetailEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreateSourceDetailEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("createSourceDetail")
  private CreateSourceDetailEnum createSourceDetail = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("updatedAt")
  private OffsetDateTime updatedAt = null;

  public ApplicationExperiment active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @ApiModelProperty(value = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public ApplicationExperiment version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public ApplicationExperiment startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }

  public ApplicationExperiment endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }

  public ApplicationExperiment duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @ApiModelProperty(value = "")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public ApplicationExperiment serviceStates(List<ServiceStateStage> serviceStates) {
    this.serviceStates = serviceStates;
    return this;
  }

  public ApplicationExperiment addServiceStatesItem(ServiceStateStage serviceStatesItem) {
    if (this.serviceStates == null) {
      this.serviceStates = new ArrayList<ServiceStateStage>();
    }
    this.serviceStates.add(serviceStatesItem);
    return this;
  }

   /**
   * Get serviceStates
   * @return serviceStates
  **/
  @ApiModelProperty(value = "")
  public List<ServiceStateStage> getServiceStates() {
    return serviceStates;
  }

  public void setServiceStates(List<ServiceStateStage> serviceStates) {
    this.serviceStates = serviceStates;
  }

  public ApplicationExperiment distributedClients(List<String> distributedClients) {
    this.distributedClients = distributedClients;
    return this;
  }

  public ApplicationExperiment addDistributedClientsItem(String distributedClientsItem) {
    if (this.distributedClients == null) {
      this.distributedClients = new ArrayList<String>();
    }
    this.distributedClients.add(distributedClientsItem);
    return this;
  }

   /**
   * Get distributedClients
   * @return distributedClients
  **/
  @ApiModelProperty(value = "")
  public List<String> getDistributedClients() {
    return distributedClients;
  }

  public void setDistributedClients(List<String> distributedClients) {
    this.distributedClients = distributedClients;
  }

  public ApplicationExperiment impactedClients(List<String> impactedClients) {
    this.impactedClients = impactedClients;
    return this;
  }

  public ApplicationExperiment addImpactedClientsItem(String impactedClientsItem) {
    if (this.impactedClients == null) {
      this.impactedClients = new ArrayList<String>();
    }
    this.impactedClients.add(impactedClientsItem);
    return this;
  }

   /**
   * Get impactedClients
   * @return impactedClients
  **/
  @ApiModelProperty(value = "")
  public List<String> getImpactedClients() {
    return impactedClients;
  }

  public void setImpactedClients(List<String> impactedClients) {
    this.impactedClients = impactedClients;
  }

  public ApplicationExperiment createSource(CreateSourceEnum createSource) {
    this.createSource = createSource;
    return this;
  }

   /**
   * Get createSource
   * @return createSource
  **/
  @ApiModelProperty(value = "")
  public CreateSourceEnum getCreateSource() {
    return createSource;
  }

  public void setCreateSource(CreateSourceEnum createSource) {
    this.createSource = createSource;
  }

  public ApplicationExperiment expectedEnd(OffsetDateTime expectedEnd) {
    this.expectedEnd = expectedEnd;
    return this;
  }

   /**
   * Get expectedEnd
   * @return expectedEnd
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getExpectedEnd() {
    return expectedEnd;
  }

  public void setExpectedEnd(OffsetDateTime expectedEnd) {
    this.expectedEnd = expectedEnd;
  }

  public ApplicationExperiment stage(StageEnum stage) {
    this.stage = stage;
    return this;
  }

   /**
   * Get stage
   * @return stage
  **/
  @ApiModelProperty(value = "")
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(StageEnum stage) {
    this.stage = stage;
  }

  public ApplicationExperiment experimentInterval(Interval experimentInterval) {
    this.experimentInterval = experimentInterval;
    return this;
  }

   /**
   * Get experimentInterval
   * @return experimentInterval
  **/
  @ApiModelProperty(value = "")
  public Interval getExperimentInterval() {
    return experimentInterval;
  }

  public void setExperimentInterval(Interval experimentInterval) {
    this.experimentInterval = experimentInterval;
  }

  public ApplicationExperiment guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @ApiModelProperty(value = "")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public ApplicationExperiment attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ApplicationExperiment putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String, Object>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public ApplicationExperiment createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @ApiModelProperty(value = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public ApplicationExperiment orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

   /**
   * Get orgId
   * @return orgId
  **/
  @ApiModelProperty(value = "")
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }

  public ApplicationExperiment tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public ApplicationExperiment putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }

  public ApplicationExperiment sourceInfo(SourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
    return this;
  }

   /**
   * Get sourceInfo
   * @return sourceInfo
  **/
  @ApiModelProperty(value = "")
  public SourceInfo getSourceInfo() {
    return sourceInfo;
  }

  public void setSourceInfo(SourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
  }

  public ApplicationExperiment createSourceDetail(CreateSourceDetailEnum createSourceDetail) {
    this.createSourceDetail = createSourceDetail;
    return this;
  }

   /**
   * Get createSourceDetail
   * @return createSourceDetail
  **/
  @ApiModelProperty(value = "")
  public CreateSourceDetailEnum getCreateSourceDetail() {
    return createSourceDetail;
  }

  public void setCreateSourceDetail(CreateSourceDetailEnum createSourceDetail) {
    this.createSourceDetail = createSourceDetail;
  }

  public ApplicationExperiment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public ApplicationExperiment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationExperiment applicationExperiment = (ApplicationExperiment) o;
    return Objects.equals(this.active, applicationExperiment.active) &&
        Objects.equals(this.version, applicationExperiment.version) &&
        Objects.equals(this.startTime, applicationExperiment.startTime) &&
        Objects.equals(this.endTime, applicationExperiment.endTime) &&
        Objects.equals(this.duration, applicationExperiment.duration) &&
        Objects.equals(this.serviceStates, applicationExperiment.serviceStates) &&
        Objects.equals(this.distributedClients, applicationExperiment.distributedClients) &&
        Objects.equals(this.impactedClients, applicationExperiment.impactedClients) &&
        Objects.equals(this.createSource, applicationExperiment.createSource) &&
        Objects.equals(this.expectedEnd, applicationExperiment.expectedEnd) &&
        Objects.equals(this.stage, applicationExperiment.stage) &&
        Objects.equals(this.experimentInterval, applicationExperiment.experimentInterval) &&
        Objects.equals(this.guid, applicationExperiment.guid) &&
        Objects.equals(this.attributes, applicationExperiment.attributes) &&
        Objects.equals(this.createdBy, applicationExperiment.createdBy) &&
        Objects.equals(this.orgId, applicationExperiment.orgId) &&
        Objects.equals(this.tags, applicationExperiment.tags) &&
        Objects.equals(this.sourceInfo, applicationExperiment.sourceInfo) &&
        Objects.equals(this.createSourceDetail, applicationExperiment.createSourceDetail) &&
        Objects.equals(this.createdAt, applicationExperiment.createdAt) &&
        Objects.equals(this.updatedAt, applicationExperiment.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, version, startTime, endTime, duration, serviceStates, distributedClients, impactedClients, createSource, expectedEnd, stage, experimentInterval, guid, attributes, createdBy, orgId, tags, sourceInfo, createSourceDetail, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationExperiment {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    serviceStates: ").append(toIndentedString(serviceStates)).append("\n");
    sb.append("    distributedClients: ").append(toIndentedString(distributedClients)).append("\n");
    sb.append("    impactedClients: ").append(toIndentedString(impactedClients)).append("\n");
    sb.append("    createSource: ").append(toIndentedString(createSource)).append("\n");
    sb.append("    expectedEnd: ").append(toIndentedString(expectedEnd)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    experimentInterval: ").append(toIndentedString(experimentInterval)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sourceInfo: ").append(toIndentedString(sourceInfo)).append("\n");
    sb.append("    createSourceDetail: ").append(toIndentedString(createSourceDetail)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

