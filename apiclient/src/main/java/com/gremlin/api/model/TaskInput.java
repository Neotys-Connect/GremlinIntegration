/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TaskInput
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-22T16:18:53.536Z")



public class TaskInput {
  @SerializedName("command")
  private Map<String, Object> command = null;

  @SerializedName("multiSelectTags")
  private Map<String, List<String>> multiSelectTags = null;

  @SerializedName("multiSelectLabels")
  private Map<String, List<String>> multiSelectLabels = null;

  @SerializedName("target")
  private Map<String, Object> target = null;

  @SerializedName("annotations")
  private Map<String, String> annotations = null;

  /**
   * Gets or Sets source
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    WEBAPP("WebApp"),
    
    API("Api"),
    
    SCHEDULED("Scheduled"),
    
    MANUAL("Manual"),
    
    SPINNAKER("Spinnaker"),
    
    CONCORD("Concord"),
    
    GREMLINFEEDER("GremlinFeeder"),
    
    GREMLINSDKPYTHON("GremlinSdkPython"),
    
    SCENARIO("Scenario"),
    
    CHAO("Chao"),
    
    WEBSITE("Website");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("source")
  private SourceEnum source = null;

  @SerializedName("callbacks")
  private List<CallBack> callbacks = null;

  public TaskInput command(Map<String, Object> command) {
    this.command = command;
    return this;
  }

  public TaskInput putCommandItem(String key, Object commandItem) {
    if (this.command == null) {
      this.command = new HashMap<String, Object>();
    }
    this.command.put(key, commandItem);
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getCommand() {
    return command;
  }

  public void setCommand(Map<String, Object> command) {
    this.command = command;
  }

  public TaskInput multiSelectTags(Map<String, List<String>> multiSelectTags) {
    this.multiSelectTags = multiSelectTags;
    return this;
  }

  public TaskInput putMultiSelectTagsItem(String key, List<String> multiSelectTagsItem) {
    if (this.multiSelectTags == null) {
      this.multiSelectTags = new HashMap<String, List<String>>();
    }
    this.multiSelectTags.put(key, multiSelectTagsItem);
    return this;
  }

   /**
   * Get multiSelectTags
   * @return multiSelectTags
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<String>> getMultiSelectTags() {
    return multiSelectTags;
  }

  public void setMultiSelectTags(Map<String, List<String>> multiSelectTags) {
    this.multiSelectTags = multiSelectTags;
  }

  public TaskInput multiSelectLabels(Map<String, List<String>> multiSelectLabels) {
    this.multiSelectLabels = multiSelectLabels;
    return this;
  }

  public TaskInput putMultiSelectLabelsItem(String key, List<String> multiSelectLabelsItem) {
    if (this.multiSelectLabels == null) {
      this.multiSelectLabels = new HashMap<String, List<String>>();
    }
    this.multiSelectLabels.put(key, multiSelectLabelsItem);
    return this;
  }

   /**
   * Get multiSelectLabels
   * @return multiSelectLabels
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<String>> getMultiSelectLabels() {
    return multiSelectLabels;
  }

  public void setMultiSelectLabels(Map<String, List<String>> multiSelectLabels) {
    this.multiSelectLabels = multiSelectLabels;
  }

  public TaskInput target(Map<String, Object> target) {
    this.target = target;
    return this;
  }

  public TaskInput putTargetItem(String key, Object targetItem) {
    if (this.target == null) {
      this.target = new HashMap<String, Object>();
    }
    this.target.put(key, targetItem);
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getTarget() {
    return target;
  }

  public void setTarget(Map<String, Object> target) {
    this.target = target;
  }

  public TaskInput annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public TaskInput putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<String, String>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }

  public TaskInput source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @ApiModelProperty(value = "")
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }

  public TaskInput callbacks(List<CallBack> callbacks) {
    this.callbacks = callbacks;
    return this;
  }

  public TaskInput addCallbacksItem(CallBack callbacksItem) {
    if (this.callbacks == null) {
      this.callbacks = new ArrayList<CallBack>();
    }
    this.callbacks.add(callbacksItem);
    return this;
  }

   /**
   * Get callbacks
   * @return callbacks
  **/
  @ApiModelProperty(value = "")
  public List<CallBack> getCallbacks() {
    return callbacks;
  }

  public void setCallbacks(List<CallBack> callbacks) {
    this.callbacks = callbacks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskInput taskInput = (TaskInput) o;
    return Objects.equals(this.command, taskInput.command) &&
        Objects.equals(this.multiSelectTags, taskInput.multiSelectTags) &&
        Objects.equals(this.multiSelectLabels, taskInput.multiSelectLabels) &&
        Objects.equals(this.target, taskInput.target) &&
        Objects.equals(this.annotations, taskInput.annotations) &&
        Objects.equals(this.source, taskInput.source) &&
        Objects.equals(this.callbacks, taskInput.callbacks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, multiSelectTags, multiSelectLabels, target, annotations, source, callbacks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskInput {\n");
    
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    multiSelectTags: ").append(toIndentedString(multiSelectTags)).append("\n");
    sb.append("    multiSelectLabels: ").append(toIndentedString(multiSelectLabels)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    callbacks: ").append(toIndentedString(callbacks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

