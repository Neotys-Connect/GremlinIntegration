/*
 * The Gremlin API
 * The API for interacting with Gremlin's 'Failure as a Service'
 *
 * OpenAPI spec version: v1
 * Contact: support@gremlin.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gremlin.api.api;

import com.gremlin.api.*;
import com.gremlin.api.model.TaskMetrics;
import com.gremlin.api.ApiGremlinException;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gremlin.api.model.AttackMetricsDisplayResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiGremlinClient apiGremlinClient;

    public MetricsApi() {
        this(Configuration.getDefaultApiGremlinClient());
    }

    public MetricsApi(ApiGremlinClient apiGremlinClient) {
        this.apiGremlinClient = apiGremlinClient;
    }

    public ApiGremlinClient getApiGremlinClient() {
        return apiGremlinClient;
    }

    public void setApiGremlinClient(ApiGremlinClient apiGremlinClient) {
        this.apiGremlinClient = apiGremlinClient;
    }

    /**
     * Build call for getMetricsForAttack
     * @param attackId  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiGremlinException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetricsForAttackCall(String attackId, Object teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiGremlinException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/attacks/{attackId}"
            .replaceAll("\\{" + "attackId" + "\\}", apiGremlinClient.escapeString(attackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (teamId != null)
        localVarQueryParams.addAll(apiGremlinClient.parameterToPair("teamId", teamId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiGremlinClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiGremlinClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiGremlinClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "GremlinapiKey" };
        return apiGremlinClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetricsForAttackValidateBeforeCall(String attackId, Object teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiGremlinException {
        
        // verify the required parameter 'attackId' is set
        if (attackId == null) {
            throw new ApiGremlinException("Missing the required parameter 'attackId' when calling getMetricsForAttack(Async)");
        }
        

        com.squareup.okhttp.Call call = getMetricsForAttackCall(attackId, teamId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metrics for an attack
     * This endpoint will allow you to get metrics for a specific attack based on its guid.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param attackId  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @return AttackMetricsDisplayResponse
     * @throws ApiGremlinException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttackMetricsDisplayResponse getMetricsForAttack(String attackId, Object teamId) throws ApiGremlinException {
        ApiResponse<AttackMetricsDisplayResponse> resp = getMetricsForAttackWithHttpInfo(attackId, teamId);
        return resp.getData();
    }

    /**
     * Get metrics for an attack
     * This endpoint will allow you to get metrics for a specific attack based on its guid.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param attackId  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @return ApiResponse&lt;AttackMetricsDisplayResponse&gt;
     * @throws ApiGremlinException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttackMetricsDisplayResponse> getMetricsForAttackWithHttpInfo(String attackId, Object teamId) throws ApiGremlinException {
        com.squareup.okhttp.Call call = getMetricsForAttackValidateBeforeCall(attackId, teamId, null, null);
        Type localVarReturnType = new TypeToken<AttackMetricsDisplayResponse>(){}.getType();
        return apiGremlinClient.execute(call, localVarReturnType);
    }

    /**
     * Get metrics for an attack (asynchronously)
     * This endpoint will allow you to get metrics for a specific attack based on its guid.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param attackId  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiGremlinException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetricsForAttackAsync(String attackId, Object teamId, final ApiCallback<AttackMetricsDisplayResponse> callback) throws ApiGremlinException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetricsForAttackValidateBeforeCall(attackId, teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttackMetricsDisplayResponse>(){}.getType();
        apiGremlinClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetricsForScenarioRun
     * @param scenarioId  (required)
     * @param scenarioRunNumber  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiGremlinException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetricsForScenarioRunCall(String scenarioId, Long scenarioRunNumber, Object teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiGremlinException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/scenarios/{scenarioId}/runs/{scenarioRunNumber}"
            .replaceAll("\\{" + "scenarioId" + "\\}", apiGremlinClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "scenarioRunNumber" + "\\}", apiGremlinClient.escapeString(scenarioRunNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (teamId != null)
        localVarQueryParams.addAll(apiGremlinClient.parameterToPair("teamId", teamId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiGremlinClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiGremlinClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiGremlinClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "GremlinapiKey" };
        return apiGremlinClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetricsForScenarioRunValidateBeforeCall(String scenarioId, Long scenarioRunNumber, Object teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiGremlinException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiGremlinException("Missing the required parameter 'scenarioId' when calling getMetricsForScenarioRun(Async)");
        }
        
        // verify the required parameter 'scenarioRunNumber' is set
        if (scenarioRunNumber == null) {
            throw new ApiGremlinException("Missing the required parameter 'scenarioRunNumber' when calling getMetricsForScenarioRun(Async)");
        }
        

        com.squareup.okhttp.Call call = getMetricsForScenarioRunCall(scenarioId, scenarioRunNumber, teamId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metrics for a scenario run
     * This endpoint will allow you to get metrics for a specific scenario run based on its scenario guid and run number.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param scenarioId  (required)
     * @param scenarioRunNumber  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @return List&lt;TaskMetrics&gt;
     * @throws ApiGremlinException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskMetrics> getMetricsForScenarioRun(String scenarioId, Long scenarioRunNumber, Object teamId) throws ApiGremlinException {
        ApiResponse<List<TaskMetrics>> resp = getMetricsForScenarioRunWithHttpInfo(scenarioId, scenarioRunNumber, teamId);
        return resp.getData();
    }

    /**
     * Get metrics for a scenario run
     * This endpoint will allow you to get metrics for a specific scenario run based on its scenario guid and run number.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param scenarioId  (required)
     * @param scenarioRunNumber  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @return ApiResponse&lt;List&lt;TaskMetrics&gt;&gt;
     * @throws ApiGremlinException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskMetrics>> getMetricsForScenarioRunWithHttpInfo(String scenarioId, Long scenarioRunNumber, Object teamId) throws ApiGremlinException {
        com.squareup.okhttp.Call call = getMetricsForScenarioRunValidateBeforeCall(scenarioId, scenarioRunNumber, teamId, null, null);
        Type localVarReturnType = new TypeToken<List<TaskMetrics>>(){}.getType();
        return apiGremlinClient.execute(call, localVarReturnType);
    }

    /**
     * Get metrics for a scenario run (asynchronously)
     * This endpoint will allow you to get metrics for a specific scenario run based on its scenario guid and run number.  # Authorization Schema ## [__Bearer Tokens__](https://www.gremlin.com/docs/api-reference/examples/#authentication-and-access-tokens) ### Role Based Access Control [&#x60;TEAM_DEFAULT&#x60;](https://www.gremlin.com/docs/user-management/access-control/#privileges) 
     * @param scenarioId  (required)
     * @param scenarioRunNumber  (required)
     * @param teamId Required when using company session token (RBAC only). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiGremlinException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetricsForScenarioRunAsync(String scenarioId, Long scenarioRunNumber, Object teamId, final ApiCallback<List<TaskMetrics>> callback) throws ApiGremlinException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetricsForScenarioRunValidateBeforeCall(scenarioId, scenarioRunNumber, teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskMetrics>>(){}.getType();
        apiGremlinClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
